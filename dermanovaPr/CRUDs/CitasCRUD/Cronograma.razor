@page "/cronograma"
@using dermanovaPr.Services.InterfaceServices
@inject Icitas_FacturacionServices CitasService

<h3 class="text-center mt-3">Citas por Fecha y Hora</h3>

@if (CitasAgrupadas == null || !CitasAgrupadas.Any())
{
    <div class="alert alert-warning text-center">
        <strong>No hay citas disponibles.</strong>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover table-bordered">
            <thead class="table-dark">
                <tr>
                    <th scope="col">Fecha</th>
                    <th scope="col">Hora</th>
                    <th scope="col">Cliente</th>
                    <th scope="col">Trabajador</th>
                    <th scope="col">ID Cita</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var fechaGroup in CitasAgrupadas)
                {
                    
                        <!-- Columna Fecha -->
                        <td rowspan="@fechaGroup.Horas.Sum(h => h.Citas.Count)" class="align-middle">@fechaGroup.Fecha.ToShortDateString()</td>

                        @foreach (var horaGroup in fechaGroup.Horas)
                        {
                            <!-- Columna Hora -->
                            <td rowspan="@horaGroup.Citas.Count" class="align-middle">@horaGroup.Hora</td>

                            @foreach (var cita in horaGroup.Citas)
                            {
                                <td>@cita.ClienteNombre</td>
                                <td>@cita.TrabajadorNombre</td>
                                <td>@cita.CitasId</td>
                    
                           
                            }
                        }
                    }
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<FechaGrupoDTO> CitasAgrupadas;

    protected override async Task OnInitializedAsync()
    {
        var response = await CitasService.GetCitasAgrupadasPorFechaYHora();

        if (response.IsSuccess)
        {
            CitasAgrupadas = response.Data as List<FechaGrupoDTO>;
        }
        else
        {
            CitasAgrupadas = new List<FechaGrupoDTO>();
        }
    }

    private class FechaGrupoDTO
    {
        public DateTime Fecha { get; set; }
        public List<HoraGrupoDTO> Horas { get; set; } = new();
    }

    private class HoraGrupoDTO
    {
        public string Hora { get; set; }
        public List<CitaDTO> Citas { get; set; } = new();
    }

    private class CitaDTO
    {
        public int CitasId { get; set; }
        public string ClienteNombre { get; set; }
        public string TrabajadorNombre { get; set; }
        public DateTime Fecha { get; set; }
        public string Hora { get; set; }
    }
}
