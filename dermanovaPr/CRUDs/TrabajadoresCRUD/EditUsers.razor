@page "/edit-user/{userId}"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using dermanovaPr.Services.InterfaceServices
@inject IuserServices UserService
@inject IJSRuntime JSRuntime

<EditForm EditContext="editContext" OnValidSubmit="HandleChangePassword">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="currentPassword">Contraseña Actual:</label>
        <InputText id="currentPassword" @bind-Value="passwordModel.CurrentPassword" type="password" />
        <ValidationMessage For="@(() => passwordModel.CurrentPassword)" />
    </div>

    <div>
        <label for="newPassword">Nueva Contraseña:</label>
        <InputText id="newPassword" @bind-Value="passwordModel.NewPassword" type="password" />
        <ValidationMessage For="@(() => passwordModel.NewPassword)" />
    </div>

    <button type="submit">Cambiar Contraseña</button>
</EditForm>

@code {
    [Parameter]
    public string userId { get; set; }

    private PasswordModel passwordModel = new PasswordModel();
    private ValidationMessageStore _validationMessageStore;
    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(passwordModel);
        _validationMessageStore = new ValidationMessageStore(editContext);
    }

    public class PasswordComplexityAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (value is string password)
            {
                if (!Regex.IsMatch(password, @"[!@#$%^&*(),.?\:{}|<>]"))
                {
                    return new ValidationResult("La contraseña debe contener al menos un carácter especial.");
                }

                if (!Regex.IsMatch(password, @"\d"))
                {
                    return new ValidationResult("La contraseña debe contener al menos un número.");
                }

                if (!Regex.IsMatch(password, @"[A-Z]"))
                {
                    return new ValidationResult("La contraseña debe contener al menos una letra mayúscula.");
                }

                if (!Regex.IsMatch(password, @"[a-z]"))
                {
                    return new ValidationResult("La contraseña debe contener al menos una letra minúscula.");
                }
            }

            return ValidationResult.Success;
        }
    }

    public class PasswordModel
    {
        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        [StringLength(100, ErrorMessage = "La contraseña debe tener al menos {2} y máximo {1} caracteres.", MinimumLength = 6)]
        [PasswordComplexity(ErrorMessage = "La contraseña debe cumplir con los requisitos de complejidad.")]
        public string CurrentPassword { get; set; }

        [Required(ErrorMessage = "La nueva contraseña es obligatoria.")]
        [StringLength(100, ErrorMessage = "La nueva contraseña debe tener al menos {2} y máximo {1} caracteres.", MinimumLength = 6)]
        [PasswordComplexity(ErrorMessage = "La nueva contraseña debe cumplir con los requisitos de complejidad.")]
        public string NewPassword { get; set; }
    }

    private async Task HandleChangePassword()
    {
        // Limpiar mensajes de validación anteriores
        _validationMessageStore.Clear();

        var result = await UserService.ChangeUserPasswordAsync(userId, passwordModel.CurrentPassword, passwordModel.NewPassword);

        if (result.Succeeded)
        {
            // Mostrar mensaje de éxito
            Console.WriteLine("Contraseña cambiada exitosamente");
        }
        else
        {
            // Mostrar mensajes de error
            foreach (var error in result.Errors)
            {
                _validationMessageStore.Add(editContext.Field(nameof(passwordModel.NewPassword)), error.Description);
            }
            editContext.NotifyValidationStateChanged();
        }
    }
}
