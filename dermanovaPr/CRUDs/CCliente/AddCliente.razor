@page "/Clt"
@using System.ComponentModel.DataAnnotations
@using dermanovaPr.Models
@using dermanovaPr.Models.Dtos
@using dermanovaPr.Services
@using dermanovaPr.Services.InterfaceServices
@inject NavigationManager Nav_
@inject IJSRuntime JSRuntime


<h3 class="align-content-center">Formato de Entrada</h3>

<div class="container mt-3">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">New Client</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="@dTOS" OnValidSubmit="AddClientes">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        <div class="form-group mb-3">
                            <label for="clientName">Client Name</label>
                            <InputText @bind-Value="dTOS.Nombre" class="form-control" id="clientName" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="cedula">Cedula</label>
                            <InputText @bind-Value="CedulaInput.Cedula" class="form-control" id="cedula" />
                            <span class="text-danger">@CedulaError</span>
                        </div>

                        <div class="form-group mb-3">
                            <label for="celular">Celular</label>
                            <InputText @bind-Value="dTOS.Celular" class="form-control" id="celular" />
                        </div>

                        <button type="submit" class="btn btn-primary">Submit</button>
                    </EditForm>
                </div>

            </div>
        </div>
    </div>
</div>

@code {
    [Inject] IClientes services { get; set; }
    // Inicializamos el DTO para el cliente
    public ClientesDTOS dTOS { get; set; } = new ClientesDTOS();
    private ValidationC CedulaInput { get; set; } = new();
    private string CedulaError;
    // Método para agregar un cliente
    private async Task AddClientes()
    {

        // Validar la cédula
        if (!ValidarCedula(CedulaInput.Cedula))
        {
            CedulaError = "La cédula no es válida.";
            // editContext.NotifyValidationStateChanged();
            return;
        }
        // else
        // {

            // // CedulaError = ="La cédula es válida.";
            // dTOS.Cedula = CedulaInput.Cedula;
            // var verif = await services.CedulaExist(dTOS.Cedula);
            // if (verif != null)
            // {
            //     CedulaError = "la cedula ya esta registrada ";
            //     return;
            // }
            // var v = await services.CelularExist(dTOS.Celular);
            // if (v != null)
            // {
            //     CedulaError = "la celular ya esta registrada ";
            //     return;
            // }
      //  }
        if (services != null && dTOS != null)
        {
            // Llamamos al servicio para agregar el cliente
            var result = await services.AddClientes(dTOS);

            if (result!=null) // Asumiendo que 'AddClientes' retorna un booleano
            {
                // Si se agrega correctamente, redirigimos a otra página
                Nav_.NavigateTo("/");
            }
            else
            {
                // Manejar el error si no se pudo agregar el cliente
                Console.WriteLine("Error adding client.");
            }
        }

    }





    private class ValidationC
    {
        
        public string Cedula { get; set; } = string.Empty;
    }



    // Método de validación de cédula
    private bool ValidarCedula(string cedula)
    {
        string pattern = @"^\d{3}-\d{6}-\d{4}[A-Z]$";
        var regex = new System.Text.RegularExpressions.Regex(pattern);

        if (!regex.IsMatch(cedula))
        {
            return false;
        }

        // Separar las partes de la cédula
        string[] partes = cedula.Split('-');
        string region = partes[0];
        string fecha = partes[1];
        string serie = partes[2].Substring(0, 4);
        char letraVerificacion = partes[2][4];

        // Validar la región
        if (!int.TryParse(region, out int numeroRegion) || numeroRegion < 1 || numeroRegion > 999)
        {
            return false;
        }

        // Validar la fecha
        if (!EsFechaValida(fecha))
        {
            return false;
        }

        return true;
    }

    private bool EsFechaValida(string fecha)
    {
        if (fecha.Length != 6)
        {
            return false;
        }

        int dia = int.Parse(fecha.Substring(0, 2));
        int mes = int.Parse(fecha.Substring(2, 2));
        int año = int.Parse(fecha.Substring(4, 2)) + 1900;

        try
        {
            DateTime fechaNacimiento = new DateTime(año, mes, dia);
            return true;
        }
        catch
        {
            return false;
        }
    }
}

